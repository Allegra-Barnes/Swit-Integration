/**
 * SWIT Open API
 * This is a SWIT Open Api server.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.ModelAddTaskAssigneeParam
import io.swagger.client.model.ModelAddTaskAssigneeResponse
import io.swagger.client.model.ModelAddTaskCommentParam
import io.swagger.client.model.ModelAddTaskCommentResponse
import io.swagger.client.model.ModelDelTaskAssigneeParam
import io.swagger.client.model.ModelDelTaskAssigneeResponse
import io.swagger.client.model.ModelDelTaskCommentParam
import io.swagger.client.model.ModelDelTaskCommentResponse
import io.swagger.client.model.TaskAddTaskCheckListParam
import io.swagger.client.model.TaskAddTaskCheckListResponse
import io.swagger.client.model.TaskAddTaskParam
import io.swagger.client.model.TaskAddTaskResponse
import io.swagger.client.model.TaskCopyTaskResponse
import io.swagger.client.model.TaskDelTaskCheckListParam
import io.swagger.client.model.TaskDelTaskCheckListResponse
import io.swagger.client.model.TaskDelTaskResponse
import io.swagger.client.model.TaskGetTaskCheckListListResponse
import io.swagger.client.model.TaskGetTaskCheckListResponse
import io.swagger.client.model.TaskGetTaskCommentResponse
import io.swagger.client.model.TaskGetTaskInfoResponse
import io.swagger.client.model.TaskGetTaskListAllProjectResponse
import io.swagger.client.model.TaskGetTaskListByColumnResponse
import io.swagger.client.model.TaskGetTaskListMineResponse
import io.swagger.client.model.TaskGetTaskListProjectResponse
import io.swagger.client.model.TaskMoveTaskResponse
import io.swagger.client.model.TaskPutTaskCheckListParam
import io.swagger.client.model.TaskPutTaskCheckListResponse
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object TaskApi {

  /**
   * 업무 담당자 추가/팔로우
   * 
   * Expected answers:
   *   code 200 : Seq[ModelAddTaskAssigneeResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload AddTaskAssigneeParam
   */
  def apiTaskAssigneeAddPost(payload: ModelAddTaskAssigneeParam): ApiRequest[Seq[ModelAddTaskAssigneeResponse]] =
    ApiRequest[Seq[ModelAddTaskAssigneeResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/task.assignee.add", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelAddTaskAssigneeResponse]](200)
      
  object ApiTaskAssigneeAddPostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 담당자 삭제/언팔로우
   * 
   * Expected answers:
   *   code 200 : Seq[ModelDelTaskAssigneeResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload DelTaskAssigneeParam
   */
  def apiTaskAssigneeRemovePost(payload: ModelDelTaskAssigneeParam): ApiRequest[Seq[ModelDelTaskAssigneeResponse]] =
    ApiRequest[Seq[ModelDelTaskAssigneeResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/task.assignee.remove", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelDelTaskAssigneeResponse]](200)
      
  object ApiTaskAssigneeRemovePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 체크리스트 생성
   * 
   * Expected answers:
   *   code 200 : TaskAddTaskCheckListResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload taskCheckList
   */
  def apiTaskChecklistCreatePost(payload: TaskAddTaskCheckListParam): ApiRequest[TaskAddTaskCheckListResponse] =
    ApiRequest[TaskAddTaskCheckListResponse](ApiMethods.POST, "https://app.swit.dev", "/api/task.checklist.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[TaskAddTaskCheckListResponse](200)
      
  object ApiTaskChecklistCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 체크리스트 삭제
   * 
   * Expected answers:
   *   code 200 : TaskDelTaskCheckListResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload taskCheckList
   */
  def apiTaskChecklistDeletePost(payload: TaskDelTaskCheckListParam): ApiRequest[TaskDelTaskCheckListResponse] =
    ApiRequest[TaskDelTaskCheckListResponse](ApiMethods.POST, "https://app.swit.dev", "/api/task.checklist.delete", "application/json")
      .withBody(payload)
      .withSuccessResponse[TaskDelTaskCheckListResponse](200)
      
  object ApiTaskChecklistDeletePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 체크리스트 목록
   * 
   * Expected answers:
   *   code 200 : Seq[TaskGetTaskCheckListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param id 
   */
  def apiTaskChecklistInfoGet(id: String): ApiRequest[Seq[TaskGetTaskCheckListResponse]] =
    ApiRequest[Seq[TaskGetTaskCheckListResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/task.checklist.info", "application/json")
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[TaskGetTaskCheckListResponse]](200)
      
  object ApiTaskChecklistInfoGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 체크리스트 리스트
   * 
   * Expected answers:
   *   code 200 : Seq[TaskGetTaskCheckListListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param taskId 
   */
  def apiTaskChecklistListGet(taskId: String): ApiRequest[Seq[TaskGetTaskCheckListListResponse]] =
    ApiRequest[Seq[TaskGetTaskCheckListListResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/task.checklist.list", "application/json")
      .withQueryParam("task_id", taskId)
      .withSuccessResponse[Seq[TaskGetTaskCheckListListResponse]](200)
      
  object ApiTaskChecklistListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 체크리스트 수정
   * 
   * Expected answers:
   *   code 200 : TaskPutTaskCheckListResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload taskCheckList
   */
  def apiTaskChecklistUpdatePost(payload: TaskPutTaskCheckListParam): ApiRequest[TaskPutTaskCheckListResponse] =
    ApiRequest[TaskPutTaskCheckListResponse](ApiMethods.POST, "https://app.swit.dev", "/api/task.checklist.update", "application/json")
      .withBody(payload)
      .withSuccessResponse[TaskPutTaskCheckListResponse](200)
      
  object ApiTaskChecklistUpdatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 댓글 등록
   * 
   * Expected answers:
   *   code 200 : Seq[ModelAddTaskCommentResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload AddTaskCommentParam
   */
  def apiTaskCommentCreatePost(payload: ModelAddTaskCommentParam): ApiRequest[Seq[ModelAddTaskCommentResponse]] =
    ApiRequest[Seq[ModelAddTaskCommentResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/task.comment.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelAddTaskCommentResponse]](200)
      
  object ApiTaskCommentCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 댓글 목록
   * 
   * Expected answers:
   *   code 200 : Seq[TaskGetTaskCommentResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param taskId 
   * @param limit 
   * @param offset 
   */
  def apiTaskCommentListGet(taskId: String, limit: Option[Int] = None, offset: Option[Int] = None): ApiRequest[Seq[TaskGetTaskCommentResponse]] =
    ApiRequest[Seq[TaskGetTaskCommentResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/task.comment.list", "application/json")
      .withQueryParam("task_id", taskId)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withSuccessResponse[Seq[TaskGetTaskCommentResponse]](200)
      
  object ApiTaskCommentListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 댓글 삭제
   * 
   * Expected answers:
   *   code 200 : Seq[ModelDelTaskCommentResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload DelTaskCommentParam
   */
  def apiTaskCommentRemovePost(payload: ModelDelTaskCommentParam): ApiRequest[Seq[ModelDelTaskCommentResponse]] =
    ApiRequest[Seq[ModelDelTaskCommentResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/task.comment.remove", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelDelTaskCommentResponse]](200)
      
  object ApiTaskCommentRemovePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 복사
   * 
   * Expected answers:
   *   code 200 : Seq[TaskCopyTaskResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param limit The maximum number of items to return
   * @param page The maximum number of items to return
   */
  def apiTaskCopyPost(limit: Option[Int] = None, page: Option[Int] = None): ApiRequest[Seq[TaskCopyTaskResponse]] =
    ApiRequest[Seq[TaskCopyTaskResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/task.copy", "application/json")
      .withQueryParam("limit", limit)
      .withQueryParam("page", page)
      .withSuccessResponse[Seq[TaskCopyTaskResponse]](200)
      
  object ApiTaskCopyPostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * create task
   * 
   * Expected answers:
   *   code 200 : TaskAddTaskResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload AddTaskParam
   */
  def apiTaskCreatePost(payload: TaskAddTaskParam): ApiRequest[TaskAddTaskResponse] =
    ApiRequest[TaskAddTaskResponse](ApiMethods.POST, "https://app.swit.dev", "/api/task.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[TaskAddTaskResponse](200)
      
  object ApiTaskCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 삭제
   * 
   * Expected answers:
   *   code 200 : Seq[TaskDelTaskResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param limit The maximum number of items to return
   * @param page The maximum number of items to return
   */
  def apiTaskDeletePost(limit: Option[Int] = None, page: Option[Int] = None): ApiRequest[Seq[TaskDelTaskResponse]] =
    ApiRequest[Seq[TaskDelTaskResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/task.delete", "application/json")
      .withQueryParam("limit", limit)
      .withQueryParam("page", page)
      .withSuccessResponse[Seq[TaskDelTaskResponse]](200)
      
  object ApiTaskDeletePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 상세정보
   * 
   * Expected answers:
   *   code 200 : TaskGetTaskInfoResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param id 
   */
  def apiTaskInfoGet(id: String): ApiRequest[TaskGetTaskInfoResponse] =
    ApiRequest[TaskGetTaskInfoResponse](ApiMethods.GET, "https://app.swit.dev", "/api/task.info", "application/json")
      .withQueryParam("id", id)
      .withSuccessResponse[TaskGetTaskInfoResponse](200)
      
  object ApiTaskInfoGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 컬럼별 업무 목록
   * 
   * Expected answers:
   *   code 200 : TaskGetTaskListByColumnResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param projectId 
   * @param bucketId 
   * @param limit 
   * @param offset 
   */
  def apiTaskListByColumnGet(projectId: String, bucketId: String, limit: Option[Int] = None, offset: Option[Int] = None): ApiRequest[TaskGetTaskListByColumnResponse] =
    ApiRequest[TaskGetTaskListByColumnResponse](ApiMethods.GET, "https://app.swit.dev", "/api/task.listByColumn", "application/json")
      .withQueryParam("project_id", projectId)
      .withQueryParam("bucket_id", bucketId)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withSuccessResponse[TaskGetTaskListByColumnResponse](200)
      
  object ApiTaskListByColumnGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 프로젝트 별 업무 목록
   * 
   * Expected answers:
   *   code 200 : TaskGetTaskListProjectResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param projectId 
   * @param wsId 
   * @param limit 
   * @param offset 
   */
  def apiTaskListByProjectGet(projectId: String, wsId: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None): ApiRequest[TaskGetTaskListProjectResponse] =
    ApiRequest[TaskGetTaskListProjectResponse](ApiMethods.GET, "https://app.swit.dev", "/api/task.listByProject", "application/json")
      .withQueryParam("ws_id", wsId)
      .withQueryParam("project_id", projectId)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withSuccessResponse[TaskGetTaskListProjectResponse](200)
      
  object ApiTaskListByProjectGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 모든 프로젝트 업무 목록
   * 
   * Expected answers:
   *   code 200 : TaskGetTaskListAllProjectResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param wsId 
   * @param limit 
   * @param offset 
   */
  def apiTaskListGet(wsId: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None): ApiRequest[TaskGetTaskListAllProjectResponse] =
    ApiRequest[TaskGetTaskListAllProjectResponse](ApiMethods.GET, "https://app.swit.dev", "/api/task.list", "application/json")
      .withQueryParam("ws_id", wsId)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withSuccessResponse[TaskGetTaskListAllProjectResponse](200)
      
  object ApiTaskListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 업무 이동
   * 
   * Expected answers:
   *   code 200 : Seq[TaskMoveTaskResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param limit The maximum number of items to return
   * @param page The maximum number of items to return
   */
  def apiTaskMovePost(limit: Option[Int] = None, page: Option[Int] = None): ApiRequest[Seq[TaskMoveTaskResponse]] =
    ApiRequest[Seq[TaskMoveTaskResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/task.move", "application/json")
      .withQueryParam("limit", limit)
      .withQueryParam("page", page)
      .withSuccessResponse[Seq[TaskMoveTaskResponse]](200)
      
  object ApiTaskMovePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 나의 업무 목록
   * 
   * Expected answers:
   *   code 200 : TaskGetTaskListMineResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param offset 
   * @param wsId 
   * @param limit 
   */
  def apiTaskMyTaskListGet(offset: Option[Int] = None, wsId: Option[String] = None, limit: Option[Int] = None): ApiRequest[TaskGetTaskListMineResponse] =
    ApiRequest[TaskGetTaskListMineResponse](ApiMethods.GET, "https://app.swit.dev", "/api/task.myTaskList", "application/json")
      .withQueryParam("offset", offset)
      .withQueryParam("ws_id", wsId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[TaskGetTaskListMineResponse](200)
      
  object ApiTaskMyTaskListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }


}

