/**
 * SWIT Open API
 * This is a SWIT Open Api server.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.IdeaCreateIdeaCommentParam
import io.swagger.client.model.IdeaCreateIdeaCommentResponse
import io.swagger.client.model.IdeaCreateIdeaParam
import io.swagger.client.model.IdeaCreateIdeaResponse
import io.swagger.client.model.IdeaDelIdeaCommentParam
import io.swagger.client.model.IdeaDelIdeaCommentResponse
import io.swagger.client.model.IdeaDelIdeaParam
import io.swagger.client.model.IdeaDelIdeaResponse
import io.swagger.client.model.IdeaGetIdeaCommentListResponse
import io.swagger.client.model.IdeaGetIdeaListResponse
import io.swagger.client.model.IdeaGetIdeaResponse
import io.swagger.client.model.MessageCreateMessageCommentParam
import io.swagger.client.model.MessageCreateMessageCommentResponse
import io.swagger.client.model.MessageCreateMessageParam
import io.swagger.client.model.MessageCreateMessageResponse
import io.swagger.client.model.MessageDeleteMessageCommentParam
import io.swagger.client.model.MessageDeleteMessageCommentResponse
import io.swagger.client.model.MessageDeleteMessageParam
import io.swagger.client.model.MessageDeleteMessageResponse
import io.swagger.client.model.MessageGetMessageCommentListResponse
import io.swagger.client.model.MessageGetMessageListResponse
import io.swagger.client.model.MessageGetMessageResponse
import io.swagger.client.model.ModelGetWorkspaceListResponse
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object MessageApi {

  /**
   * 아이데이션 코멘트 생성
   * 
   * Expected answers:
   *   code 200 : Seq[IdeaCreateIdeaCommentResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload create idea comment
   */
  def apiIdeaCommentCreatePost(payload: IdeaCreateIdeaCommentParam): ApiRequest[Seq[IdeaCreateIdeaCommentResponse]] =
    ApiRequest[Seq[IdeaCreateIdeaCommentResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/idea.comment.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[IdeaCreateIdeaCommentResponse]](200)
      
  object ApiIdeaCommentCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 아이데이션 코멘트 리스트 가져옴
   * 
   * Expected answers:
   *   code 200 : Seq[IdeaGetIdeaCommentListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param chId 
   * @param limit 
   * @param ideaId 
   * @param offset 
   */
  def apiIdeaCommentListGet(chId: String, limit: Int, ideaId: String, offset: Option[String] = None): ApiRequest[Seq[IdeaGetIdeaCommentListResponse]] =
    ApiRequest[Seq[IdeaGetIdeaCommentListResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/idea.comment.list", "application/json")
      .withQueryParam("ch_id", chId)
      .withQueryParam("limit", limit)
      .withQueryParam("idea_id", ideaId)
      .withQueryParam("offset", offset)
      .withSuccessResponse[Seq[IdeaGetIdeaCommentListResponse]](200)
      
  object ApiIdeaCommentListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 아이데이션 코멘트 삭제
   * 
   * Expected answers:
   *   code 200 : Seq[IdeaDelIdeaCommentResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload delete idea comment
   */
  def apiIdeaCommentRemovePost(payload: IdeaDelIdeaCommentParam): ApiRequest[Seq[IdeaDelIdeaCommentResponse]] =
    ApiRequest[Seq[IdeaDelIdeaCommentResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/idea.comment.remove", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[IdeaDelIdeaCommentResponse]](200)
      
  object ApiIdeaCommentRemovePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 아이데이션을 생성
   * 
   * Expected answers:
   *   code 200 : Seq[IdeaCreateIdeaResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload idea param
   */
  def apiIdeaCreatePost(payload: IdeaCreateIdeaParam): ApiRequest[Seq[IdeaCreateIdeaResponse]] =
    ApiRequest[Seq[IdeaCreateIdeaResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/idea.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[IdeaCreateIdeaResponse]](200)
      
  object ApiIdeaCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 아이데이션을 삭제
   * 
   * Expected answers:
   *   code 200 : Seq[IdeaDelIdeaResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload del idea param
   */
  def apiIdeaDeletePost(payload: IdeaDelIdeaParam): ApiRequest[Seq[IdeaDelIdeaResponse]] =
    ApiRequest[Seq[IdeaDelIdeaResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/idea.delete", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[IdeaDelIdeaResponse]](200)
      
  object ApiIdeaDeletePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 아이데이션을 가져옴
   * 
   * Expected answers:
   *   code 200 : Seq[IdeaGetIdeaResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param messageId 
   */
  def apiIdeaInfoGet(messageId: String): ApiRequest[Seq[IdeaGetIdeaResponse]] =
    ApiRequest[Seq[IdeaGetIdeaResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/idea.info", "application/json")
      .withQueryParam("message_id", messageId)
      .withSuccessResponse[Seq[IdeaGetIdeaResponse]](200)
      
  object ApiIdeaInfoGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 아이데이션 리스트를 가져옴
   * 
   * Expected answers:
   *   code 200 : Seq[IdeaGetIdeaListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param chId 
   * @param limit 
   * @param offset 
   */
  def apiIdeaListGet(chId: String, limit: Int, offset: Option[String] = None): ApiRequest[Seq[IdeaGetIdeaListResponse]] =
    ApiRequest[Seq[IdeaGetIdeaListResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/idea.list", "application/json")
      .withQueryParam("ch_id", chId)
      .withQueryParam("offset", offset)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[IdeaGetIdeaListResponse]](200)
      
  object ApiIdeaListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지 댓글을 생성한다.
   * 
   * Expected answers:
   *   code 200 : MessageCreateMessageCommentResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload CreateMessageCommentParam
   */
  def apiMessageCommentCreatePost(payload: MessageCreateMessageCommentParam): ApiRequest[MessageCreateMessageCommentResponse] =
    ApiRequest[MessageCreateMessageCommentResponse](ApiMethods.POST, "https://app.swit.dev", "/api/message.comment.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[MessageCreateMessageCommentResponse](200)
      
  object ApiMessageCommentCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지의 댓글리스트를 조회한다.
   * 
   * Expected answers:
   *   code 200 : Seq[MessageGetMessageCommentListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param messageId 
   * @param offset 
   * @param limit 
   */
  def apiMessageCommentListGet(messageId: String, offset: String, limit: Int): ApiRequest[Seq[MessageGetMessageCommentListResponse]] =
    ApiRequest[Seq[MessageGetMessageCommentListResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/message.comment.List", "application/json")
      .withQueryParam("message_id", messageId)
      .withQueryParam("offset", offset)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[MessageGetMessageCommentListResponse]](200)
      
  object ApiMessageCommentListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지 댓글을 삭제한다.
   * 
   * Expected answers:
   *   code 200 : MessageDeleteMessageCommentResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload DeleteMessageCommentParam
   */
  def apiMessageCommentRemovePost(payload: MessageDeleteMessageCommentParam): ApiRequest[MessageDeleteMessageCommentResponse] =
    ApiRequest[MessageDeleteMessageCommentResponse](ApiMethods.POST, "https://app.swit.dev", "/api/message.comment.remove", "application/json")
      .withBody(payload)
      .withSuccessResponse[MessageDeleteMessageCommentResponse](200)
      
  object ApiMessageCommentRemovePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지를 생성(등)한다.
   * 
   * Expected answers:
   *   code 200 : MessageCreateMessageResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload CreateMessageParam
   */
  def apiMessageCreatePost(payload: MessageCreateMessageParam): ApiRequest[MessageCreateMessageResponse] =
    ApiRequest[MessageCreateMessageResponse](ApiMethods.POST, "https://app.swit.dev", "/api/message.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[MessageCreateMessageResponse](200)
      
  object ApiMessageCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지를 삭제한다.
   * 
   * Expected answers:
   *   code 200 : MessageDeleteMessageResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload DeleteMessageParam
   */
  def apiMessageDeletePost(payload: MessageDeleteMessageParam): ApiRequest[MessageDeleteMessageResponse] =
    ApiRequest[MessageDeleteMessageResponse](ApiMethods.POST, "https://app.swit.dev", "/api/message.delete", "application/json")
      .withBody(payload)
      .withSuccessResponse[MessageDeleteMessageResponse](200)
      
  object ApiMessageDeletePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지의 단건을 조회한다.
   * 
   * Expected answers:
   *   code 200 : MessageGetMessageResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param messageId 
   */
  def apiMessageInfoGet(messageId: String): ApiRequest[MessageGetMessageResponse] =
    ApiRequest[MessageGetMessageResponse](ApiMethods.GET, "https://app.swit.dev", "/api/message.info", "application/json")
      .withQueryParam("message_id", messageId)
      .withSuccessResponse[MessageGetMessageResponse](200)
      
  object ApiMessageInfoGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지의 리스트를 가져온다.
   * 
   * Expected answers:
   *   code 200 : Seq[MessageGetMessageListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param offset 
   * @param limit 
   * @param channelId 
   */
  def apiMessageListGet(offset: String, limit: Int, channelId: String): ApiRequest[Seq[MessageGetMessageListResponse]] =
    ApiRequest[Seq[MessageGetMessageListResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/message.list", "application/json")
      .withQueryParam("offset", offset)
      .withQueryParam("limit", limit)
      .withQueryParam("channel_id", channelId)
      .withSuccessResponse[Seq[MessageGetMessageListResponse]](200)
      
  object ApiMessageListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지 리액션을 추가한다.
   * 
   * Expected answers:
   *   code 200 : Seq[ModelGetWorkspaceListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param limit The maximum number of items to return
   * @param page The maximum number of items to return
   */
  def apiMessageReactionCreatePost(limit: Option[Int] = None, page: Option[Int] = None): ApiRequest[Seq[ModelGetWorkspaceListResponse]] =
    ApiRequest[Seq[ModelGetWorkspaceListResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/message.reaction.create", "application/json")
      .withQueryParam("limit", limit)
      .withQueryParam("page", page)
      .withSuccessResponse[Seq[ModelGetWorkspaceListResponse]](200)
      
  object ApiMessageReactionCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * 메시지 리액션을 삭제한다.
   * 
   * Expected answers:
   *   code 200 : Seq[ModelGetWorkspaceListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param limit The maximum number of items to return
   * @param page The maximum number of items to return
   */
  def apiMessageReactionDeletePost(limit: Option[Int] = None, page: Option[Int] = None): ApiRequest[Seq[ModelGetWorkspaceListResponse]] =
    ApiRequest[Seq[ModelGetWorkspaceListResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/message.reaction.delete", "application/json")
      .withQueryParam("limit", limit)
      .withQueryParam("page", page)
      .withSuccessResponse[Seq[ModelGetWorkspaceListResponse]](200)
      
  object ApiMessageReactionDeletePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }


}

