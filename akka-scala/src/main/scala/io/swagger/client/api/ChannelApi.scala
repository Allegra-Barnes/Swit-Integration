/**
 * SWIT Open API
 * This is a SWIT Open Api server.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.ModelAddChannelParam
import io.swagger.client.model.ModelAddChannelResponse
import io.swagger.client.model.ModelAddChannelUserInviteParam
import io.swagger.client.model.ModelAddChannelUserInviteResponse
import io.swagger.client.model.ModelAddDirectChannelParam
import io.swagger.client.model.ModelAddDirectChannelResponse
import io.swagger.client.model.ModelGetChannelListResponse
import io.swagger.client.model.ModelGetChannelResponse
import io.swagger.client.model.ModelGetChannelUserJoinableListResponse
import io.swagger.client.model.ModelGetChannelUserListResponse
import io.swagger.client.model.ModelPutChannelParam
import io.swagger.client.model.ModelPutChannelResponse
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object ChannelApi {

  /**
   * add direct channel
   * 
   * Expected answers:
   *   code 200 : Seq[ModelAddDirectChannelResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload add direct channel
   */
  def apiChannelCreateDirectPost(payload: ModelAddDirectChannelParam): ApiRequest[Seq[ModelAddDirectChannelResponse]] =
    ApiRequest[Seq[ModelAddDirectChannelResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/channel.createDirect", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelAddDirectChannelResponse]](200)
      
  object ApiChannelCreateDirectPostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * There are many cases where you want to accomplish a variety of work in the Asana API but want to minimize the number of HTTP requests you make. For example:  - Modern browsers limit the number of requests that a single web page can make at once. - Mobile apps will use more battery life to keep the cellular radio on when making a series of requests. - There is an overhead cost to developing software that can make multiple requests in parallel. - Some cloud platforms handle parallelism poorly, or disallow it entirely.  To make development easier in these use cases, Asana provides a **batch API** that enables developers to perform multiple “actions” by making only a single HTTP request.  ## Making a Batch Request  To make a batch request, send a POST request to /batch. Like other POST endpoints, the body should contain a data envelope. Inside this envelope should be a single actions field, containing a list of “action” objects. Each action represents a standard request to an existing endpoint in the Asana API.  **The maximum number of actions allowed in a single batch request is 10.** Making a batch request with no actions in it will result in a &#x60;400 Bad Request&#x60;.  The following are code samples:  &#x60;&#x60;&#x60;json # You can also use wget curl -X POST https://app.asana.com/api/1.0/tasks/{task_gid}/attachments \\   -H &#39;Content-Type: multipart/form-data&#39; \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Authorization: Bearer {access-token}&#39; &#x60;&#x60;&#x60; 
   * 
   * Expected answers:
   *   code 200 : Seq[ModelAddChannelResponse] (OK fjeiofjsaeiofj e ef jei iej jie jifej)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload add channel
   */
  def apiChannelCreatePost(payload: ModelAddChannelParam): ApiRequest[Seq[ModelAddChannelResponse]] =
    ApiRequest[Seq[ModelAddChannelResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/channel.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelAddChannelResponse]](200)
      
  object ApiChannelCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * get channel
   * 
   * Expected answers:
   *   code 200 : Seq[ModelGetChannelResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param wsId 
   * @param chId 
   */
  def apiChannelInfoGet(wsId: String, chId: String): ApiRequest[Seq[ModelGetChannelResponse]] =
    ApiRequest[Seq[ModelGetChannelResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/channel.info", "application/json")
      .withQueryParam("ws_id", wsId)
      .withQueryParam("ch_id", chId)
      .withSuccessResponse[Seq[ModelGetChannelResponse]](200)
      
  object ApiChannelInfoGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * get channel list
   * 
   * Expected answers:
   *   code 200 : Seq[ModelGetChannelListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param wsId 
   * @param limit 
   * @param offset 
   * @param excludeArchived 
   * @param types 
   */
  def apiChannelListGet(wsId: String, limit: Int, offset: Int, excludeArchived: Option[Boolean] = None, types: Option[String] = None): ApiRequest[Seq[ModelGetChannelListResponse]] =
    ApiRequest[Seq[ModelGetChannelListResponse]](ApiMethods.GET, "https://app.swit.dev", "/api/channel.list", "application/json")
      .withQueryParam("ws_id", wsId)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("exclude_archived", excludeArchived)
      .withQueryParam("types", types)
      .withSuccessResponse[Seq[ModelGetChannelListResponse]](200)
      
  object ApiChannelListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * put channel
   * 
   * Expected answers:
   *   code 200 : Seq[ModelPutChannelResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload put channel
   */
  def apiChannelUpdatePost(payload: ModelPutChannelParam): ApiRequest[Seq[ModelPutChannelResponse]] =
    ApiRequest[Seq[ModelPutChannelResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/channel.update", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelPutChannelResponse]](200)
      
  object ApiChannelUpdatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * add channel user invite
   * 
   * Expected answers:
   *   code 200 : Seq[ModelAddChannelUserInviteResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload AddChannelUserInviteParam
   */
  def apiChannelUserInvitePost(payload: ModelAddChannelUserInviteParam): ApiRequest[Seq[ModelAddChannelUserInviteResponse]] =
    ApiRequest[Seq[ModelAddChannelUserInviteResponse]](ApiMethods.POST, "https://app.swit.dev", "/api/channel.user.invite", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelAddChannelUserInviteResponse]](200)
      
  object ApiChannelUserInvitePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * get channel user list
   * 
   * Expected answers:
   *   code 200 : ModelGetChannelUserJoinableListResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param chId 
   * @param limit 
   * @param offset 
   */
  def apiChannelUserJoinableListGet(chId: String, limit: Int, offset: Int): ApiRequest[ModelGetChannelUserJoinableListResponse] =
    ApiRequest[ModelGetChannelUserJoinableListResponse](ApiMethods.GET, "https://app.swit.dev", "/api/channel.user.joinableList", "application/json")
      .withQueryParam("ch_id", chId)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withSuccessResponse[ModelGetChannelUserJoinableListResponse](200)
      
  object ApiChannelUserJoinableListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * get channel user list
   * 
   * Expected answers:
   *   code 200 : ModelGetChannelUserListResponse (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param offset 
   * @param chId 
   * @param limit 
   */
  def apiChannelUserListGet(offset: Int, chId: String, limit: Int): ApiRequest[ModelGetChannelUserListResponse] =
    ApiRequest[ModelGetChannelUserListResponse](ApiMethods.GET, "https://app.swit.dev", "/api/channel.user.list", "application/json")
      .withQueryParam("offset", offset)
      .withQueryParam("ch_id", chId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[ModelGetChannelUserListResponse](200)
      
  object ApiChannelUserListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }


}

