/**
 * SWIT Open API
 * This is a SWIT Open Api server.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.ModelAddSampleParam
import io.swagger.client.model.ModelAddSampleResponse
import io.swagger.client.model.ModelDelSampleResponse
import io.swagger.client.model.ModelGetSampleListResponse
import io.swagger.client.model.ModelGetSampleResponse
import io.swagger.client.model.ModelPutSampleParam
import io.swagger.client.model.ModelPutSampleResponse
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object SampleApi {

  /**
   * add sample
   * 
   * Expected answers:
   *   code 200 : Seq[ModelAddSampleResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload AddSampleParam
   */
  def sampleCreatePost(payload: ModelAddSampleParam): ApiRequest[Seq[ModelAddSampleResponse]] =
    ApiRequest[Seq[ModelAddSampleResponse]](ApiMethods.POST, "https://app.swit.dev", "/sample.create", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelAddSampleResponse]](200)
      
  object SampleCreatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * del sample
   * 
   * Expected answers:
   *   code 200 : Seq[ModelDelSampleResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload PutSampleParam
   */
  def sampleDeletePost(payload: ModelPutSampleParam): ApiRequest[Seq[ModelDelSampleResponse]] =
    ApiRequest[Seq[ModelDelSampleResponse]](ApiMethods.POST, "https://app.swit.dev", "/sample.delete", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelDelSampleResponse]](200)
      
  object SampleDeletePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * get sample
   * 
   * Expected answers:
   *   code 200 : Seq[ModelGetSampleResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param msgId 
   */
  def sampleGet(msgId: String): ApiRequest[Seq[ModelGetSampleResponse]] =
    ApiRequest[Seq[ModelGetSampleResponse]](ApiMethods.GET, "https://app.swit.dev", "/sample", "application/json")
      .withQueryParam("msg_id", msgId)
      .withSuccessResponse[Seq[ModelGetSampleResponse]](200)
      
  object SampleGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * get sample
   * 
   * Expected answers:
   *   code 200 : Seq[ModelGetSampleListResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param chId 
   */
  def sampleListGet(chId: String): ApiRequest[Seq[ModelGetSampleListResponse]] =
    ApiRequest[Seq[ModelGetSampleListResponse]](ApiMethods.GET, "https://app.swit.dev", "/sample.list", "application/json")
      .withQueryParam("ch_id", chId)
      .withSuccessResponse[Seq[ModelGetSampleListResponse]](200)
      
  object SampleListGetHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }
  /**
   * put sample
   * 
   * Expected answers:
   *   code 200 : Seq[ModelPutSampleResponse] (OK)
   *              Headers :
   *                Token - qwerty
   * 
   * @param payload PutSampleParam
   */
  def sampleUpdatePost(payload: ModelPutSampleParam): ApiRequest[Seq[ModelPutSampleResponse]] =
    ApiRequest[Seq[ModelPutSampleResponse]](ApiMethods.POST, "https://app.swit.dev", "/sample.update", "application/json")
      .withBody(payload)
      .withSuccessResponse[Seq[ModelPutSampleResponse]](200)
      
  object SampleUpdatePostHeaders { 
    def token(r: ApiReturnWithHeaders) = r.getStringHeader("Token")
  }


}

